		<!--
			Use function pipelines to create a program that moves animates 
			something smoothly in response to clicks and the movement of the mouse.
			
			Evaluation checklist:
			
			___/10 HTML/CSS:
				[X] link to the jQuery library
				[X] create an element to move with an ID
				[X] change the position of that element in CSS so it can move
				[X] trigger a function using onmouseover or onmouseout
				[X] trigger a function using onclick or onkeydown
				
			___/10 PROCESS: including:
				[X] create a function that accepts an argument
				[X] create a function that returns a value
				[X] generate a random number using Math.random()
				[X] round numbers using a Javascript rounding function
				[X] uses if...else if...else to respond to different circumstances
				
			___/10 OUTPUT: including:
				[X] create a function that will animate something up using jQuery
				[X] create a function that will animate something down using jQuery
				[X] create a function that will animate something left using jQuery
				[X] create a function that will animate something right using jQuery
				[X] change the src, width, or style of an element
				
			___/10 STYLE: including:
				[X] honours all previous //STYLE sections
				[X] uses descriptive variable names
				[X] breaks up functions into separate ones for input, processing, & output
				[X] uses descriptive comments to identify and describe each function, 
				[X] for example: 
					//PROCESS: 	this function accepts distanceUp 
								& animates #imageID up that # px	
					
			HINTS: Not sure where to start?
			Note that this does not include an onclick event
			
				[  ] create an element to move, assign it an id, 
					 and change its position mode using CSS
				[  ] create a process function called getRandomDistance that 
					 will randomly generate and return a distance between 101 and 200
				[  ] create a process function called getRandomDirection that 
					 will randomly generate and return a number between 1 and 4
				[  ] create output functions called goUp, goDown, goLeft, and goRight 
						that will each accept randomDistance as an argument
						change the image to suit the direction headed
						and animate it in the correct direction 
						a distance equal to randomDistance 
				[  ] create a process function called mainProcedure that will be 
					 triggered when the element is moused over:
						it will assign randomDistance the value returned 
							from getRandomDistance()
						it will assign randomDirection the value returned 
							from getRandomDirection()
						it will use if...else if...else statements to trigger
							goUp( randomDistance ); when randomDirection is 1
							goDown( randomDistance ); when randomDirection is 2
							goLeft( randomDistance ); when randomDirection is 3
							goRight( randomDistance ); when randomDirection is anything else
				[  ] If you haven't already, check that you have 
					 added descriptive comments to each function
				[  ] Although it is not required, use console logs at the beginning 
					 of each function to tell you where you are
